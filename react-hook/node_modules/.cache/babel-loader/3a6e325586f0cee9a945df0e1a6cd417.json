{"ast":null,"code":"import { useReducer, useCallback } from 'react';\nconst initialState = {\n  isLoading: false,\n  error: null,\n  data: null,\n  extra: null,\n  identified: null\n};\n\nconst httpReducer = (currentHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return {\n        isLoading: true,\n        error: null,\n        data: null,\n        extra: null,\n        identified: action.identified\n      };\n\n    case 'RESPONSE':\n      return { ...currentHttpState,\n        isLoading: false,\n        data: action.responseData,\n        extra: action.extra\n      };\n\n    case 'ERROR':\n      return {\n        isLoading: false,\n        error: action.error\n      };\n\n    case 'CLEAR':\n      return initialState;\n\n    default:\n      throw new Error('Something was wrong!');\n  }\n};\n\nconst useHttp = () => {\n  const [userHttpState, dispatchHttp] = useReducer(httpReducer, initialState);\n  const clear = useCallback(() => dispatchHttp({\n    type: 'CLEAR'\n  }), []);\n  const sendRequest = useCallback((url, method, body, reqExtra, reqIdentified) => {\n    dispatchHttp({\n      type: 'SEND',\n      identified: reqIdentified\n    });\n    fetch(url, {\n      method: method,\n      body: body,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      return dispatchHttp({\n        type: 'RESPONSE',\n        responseData: responseData,\n        extra: reqExtra\n      });\n    }).catch(err => {\n      // setError('Something was wrong!');\n      // setIsLoading(false);\n      dispatchHttp({\n        type: 'ERROR',\n        error: err\n      });\n    });\n  }, []);\n  return {\n    isLoading: userHttpState.isLoading,\n    error: userHttpState.error,\n    data: userHttpState.data,\n    sendRequest: sendRequest,\n    extra: userHttpState.extra,\n    identified: userHttpState.identified,\n    clear: clear\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["/Volumes/gCamouInc/Dev/Projects/Trainning/React/react-hook/src/hooks/http.js"],"names":["useReducer","useCallback","initialState","isLoading","error","data","extra","identified","httpReducer","currentHttpState","action","type","responseData","Error","useHttp","userHttpState","dispatchHttp","clear","sendRequest","url","method","body","reqExtra","reqIdentified","fetch","headers","then","response","json","catch","err"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,KADM;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,IAAI,EAAE,IAHW;AAIjBC,EAAAA,KAAK,EAAE,IAJU;AAKjBC,EAAAA,UAAU,EAAE;AALK,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,gBAAD,EAAmBC,MAAnB,KAA8B;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,MAAL;AACI,aAAO;AAAER,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,KAAK,EAAE,IAA1B;AAAgCC,QAAAA,IAAI,EAAE,IAAtC;AAA4CC,QAAAA,KAAK,EAAE,IAAnD;AAAyDC,QAAAA,UAAU,EAAEG,MAAM,CAACH;AAA5E,OAAP;;AACJ,SAAK,UAAL;AACI,aAAO,EAAE,GAAGE,gBAAL;AAAuBN,QAAAA,SAAS,EAAE,KAAlC;AAAyCE,QAAAA,IAAI,EAAEK,MAAM,CAACE,YAAtD;AAAoEN,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAAlF,OAAP;;AACJ,SAAK,OAAL;AACI,aAAO;AAAEH,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,KAAK,EAAEM,MAAM,CAACN;AAAlC,OAAP;;AACJ,SAAK,OAAL;AACI,aAAOF,YAAP;;AACJ;AACI,YAAM,IAAIW,KAAJ,CAAU,sBAAV,CAAN;AAVR;AAYH,CAbD;;AAeA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAM,CAACC,aAAD,EAAgBC,YAAhB,IAAgChB,UAAU,CAACQ,WAAD,EAAcN,YAAd,CAAhD;AAEA,QAAMe,KAAK,GAAGhB,WAAW,CAAC,MAAMe,YAAY,CAAC;AAAEL,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAnB,EAAwC,EAAxC,CAAzB;AAEA,QAAMO,WAAW,GAAGjB,WAAW,CAAC,CAACkB,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,aAA9B,KAAgD;AAC5EP,IAAAA,YAAY,CAAC;AAAEL,MAAAA,IAAI,EAAE,MAAR;AAAgBJ,MAAAA,UAAU,EAAEgB;AAA5B,KAAD,CAAZ;AACAC,IAAAA,KAAK,CACDL,GADC,EACI;AACLC,MAAAA,MAAM,EAAEA,MADH;AAELC,MAAAA,IAAI,EAAEA,IAFD;AAGLI,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHJ,KADJ,CAAL,CAKGC,IALH,CAKQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAPD,EAOGF,IAPH,CAOQd,YAAY,IAAI;AACpB,aAAOI,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,YAAY,EAAEA,YAAlC;AAAgDN,QAAAA,KAAK,EAAEgB;AAAvD,OAAD,CAAnB;AACH,KATD,EASGO,KATH,CASSC,GAAG,IAAI;AACZ;AACA;AACAd,MAAAA,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAE,OAAR;AAAiBP,QAAAA,KAAK,EAAE0B;AAAxB,OAAD,CAAZ;AACH,KAbD;AAcH,GAhB8B,EAgB5B,EAhB4B,CAA/B;AAkBA,SAAO;AACH3B,IAAAA,SAAS,EAAEY,aAAa,CAACZ,SADtB;AAEHC,IAAAA,KAAK,EAAEW,aAAa,CAACX,KAFlB;AAGHC,IAAAA,IAAI,EAAEU,aAAa,CAACV,IAHjB;AAIHa,IAAAA,WAAW,EAAEA,WAJV;AAKHZ,IAAAA,KAAK,EAAES,aAAa,CAACT,KALlB;AAMHC,IAAAA,UAAU,EAAEQ,aAAa,CAACR,UANvB;AAOHU,IAAAA,KAAK,EAAEA;AAPJ,GAAP;AASH,CAhCD;;AAkCA,eAAeH,OAAf","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nconst initialState = {\n    isLoading: false,\n    error: null,\n    data: null,\n    extra: null,\n    identified: null\n};\n\nconst httpReducer = (currentHttpState, action) => {\n    switch (action.type) {\n        case 'SEND':\n            return { isLoading: true, error: null, data: null, extra: null, identified: action.identified };\n        case 'RESPONSE':\n            return { ...currentHttpState, isLoading: false, data: action.responseData, extra: action.extra };\n        case 'ERROR':\n            return { isLoading: false, error: action.error };\n        case 'CLEAR':\n            return initialState;\n        default:\n            throw new Error('Something was wrong!');\n    }\n}\n\nconst useHttp = () => {\n    const [userHttpState, dispatchHttp] = useReducer(httpReducer, initialState);\n\n    const clear = useCallback(() => dispatchHttp({ type: 'CLEAR' }), []);\n\n    const sendRequest = useCallback((url, method, body, reqExtra, reqIdentified) => {\n        dispatchHttp({ type: 'SEND', identified: reqIdentified });\n        fetch(\n            url, {\n            method: method,\n            body: body,\n            headers: { 'Content-Type': 'application/json' }\n        }).then(response => {\n            return response.json();\n        }).then(responseData => {\n            return dispatchHttp({ type: 'RESPONSE', responseData: responseData, extra: reqExtra })\n        }).catch(err => {\n            // setError('Something was wrong!');\n            // setIsLoading(false);\n            dispatchHttp({ type: 'ERROR', error: err });\n        });\n    }, []);\n\n    return {\n        isLoading: userHttpState.isLoading,\n        error: userHttpState.error,\n        data: userHttpState.data,\n        sendRequest: sendRequest,\n        extra: userHttpState.extra,\n        identified: userHttpState.identified,\n        clear: clear\n    }\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}