{"ast":null,"code":"import { useReducer, useCallback } from 'react';\n\nconst httpReducer = (currentHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return {\n        isLoading: true,\n        error: null,\n        data: null\n      };\n\n    case 'RESPONSE':\n      return { ...currentHttpState,\n        isLoading: false,\n        data: action.responseData\n      };\n\n    case 'ERROR':\n      return {\n        isLoading: false,\n        error: action.error\n      };\n\n    case 'CLEAR':\n      return { ...currentHttpState,\n        error: null\n      };\n\n    default:\n      throw new Error('Something was wrong!');\n  }\n};\n\nconst useHttp = () => {\n  const [userHttpState, dispatchHttp] = useReducer(httpReducer, {\n    isLoading: false,\n    error: null,\n    data: null\n  });\n  const sendRequest = useCallback((url, method, body) => {\n    fetch(url, {\n      method: method,\n      body: body,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      return dispatchHttp({\n        type: 'RESPONSE',\n        data: responseData\n      });\n    }).catch(err => {\n      // setError('Something was wrong!');\n      // setIsLoading(false);\n      dispatchHttp({\n        type: 'ERROR',\n        error: err\n      });\n    });\n  }, []);\n  return {\n    isLoading: userHttpState.isLoading,\n    error: userHttpState.error,\n    data: userHttpState.data,\n    sendRequest: sendRequest\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["/Volumes/gCamouInc/Dev/Projects/Trainning/React/react-hook/src/hooks/http.js"],"names":["useReducer","useCallback","httpReducer","currentHttpState","action","type","isLoading","error","data","responseData","Error","useHttp","userHttpState","dispatchHttp","sendRequest","url","method","body","fetch","headers","then","response","json","catch","err"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;;AAIA,MAAMC,WAAW,GAAG,CAACC,gBAAD,EAAmBC,MAAnB,KAA8B;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,MAAL;AACI,aAAO;AAAEC,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,KAAK,EAAE,IAA1B;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAAP;;AACJ,SAAK,UAAL;AACI,aAAO,EAAE,GAAGL,gBAAL;AAAuBG,QAAAA,SAAS,EAAE,KAAlC;AAAyCE,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAAtD,OAAP;;AACJ,SAAK,OAAL;AACI,aAAO;AAAEH,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,KAAK,EAAEH,MAAM,CAACG;AAAlC,OAAP;;AACJ,SAAK,OAAL;AACI,aAAO,EAAE,GAAGJ,gBAAL;AAAuBI,QAAAA,KAAK,EAAE;AAA9B,OAAP;;AACJ;AACI,YAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;AAVR;AAYH,CAbD;;AAeA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAM,CAACC,aAAD,EAAgBC,YAAhB,IAAgCb,UAAU,CAACE,WAAD,EAC5C;AACII,IAAAA,SAAS,EAAE,KADf;AAEIC,IAAAA,KAAK,EAAE,IAFX;AAGIC,IAAAA,IAAI,EAAE;AAHV,GAD4C,CAAhD;AAOA,QAAMM,WAAW,GAAGb,WAAW,CAAC,CAACc,GAAD,EAAMC,MAAN,EAAcC,IAAd,KAAuB;AACnDC,IAAAA,KAAK,CACDH,GADC,EACI;AACLC,MAAAA,MAAM,EAAEA,MADH;AAELC,MAAAA,IAAI,EAAEA,IAFD;AAGLE,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHJ,KADJ,CAAL,CAKGC,IALH,CAKQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAPD,EAOGF,IAPH,CAOQX,YAAY,IAAI;AACpB,aAAOI,YAAY,CAAC;AAAER,QAAAA,IAAI,EAAE,UAAR;AAAoBG,QAAAA,IAAI,EAAEC;AAA1B,OAAD,CAAnB;AACH,KATD,EASGc,KATH,CASSC,GAAG,IAAI;AACZ;AACA;AACAX,MAAAA,YAAY,CAAC;AAAER,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,KAAK,EAAEiB;AAAxB,OAAD,CAAZ;AACH,KAbD;AAcH,GAf8B,EAe5B,EAf4B,CAA/B;AAiBA,SAAO;AACHlB,IAAAA,SAAS,EAAEM,aAAa,CAACN,SADtB;AAEHC,IAAAA,KAAK,EAAEK,aAAa,CAACL,KAFlB;AAGHC,IAAAA,IAAI,EAAEI,aAAa,CAACJ,IAHjB;AAIHM,IAAAA,WAAW,EAAEA;AAJV,GAAP;AAMH,CA/BD;;AAiCA,eAAeH,OAAf","sourcesContent":["import { useReducer, useCallback } from 'react';\n\n\n\nconst httpReducer = (currentHttpState, action) => {\n    switch (action.type) {\n        case 'SEND':\n            return { isLoading: true, error: null, data: null };\n        case 'RESPONSE':\n            return { ...currentHttpState, isLoading: false, data: action.responseData };\n        case 'ERROR':\n            return { isLoading: false, error: action.error };\n        case 'CLEAR':\n            return { ...currentHttpState, error: null };\n        default:\n            throw new Error('Something was wrong!');\n    }\n}\n\nconst useHttp = () => {\n    const [userHttpState, dispatchHttp] = useReducer(httpReducer,\n        {\n            isLoading: false,\n            error: null,\n            data: null\n        });\n\n    const sendRequest = useCallback((url, method, body) => {\n        fetch(\n            url, {\n            method: method,\n            body: body,\n            headers: { 'Content-Type': 'application/json' }\n        }).then(response => {\n            return response.json();\n        }).then(responseData => {\n            return dispatchHttp({ type: 'RESPONSE', data: responseData })\n        }).catch(err => {\n            // setError('Something was wrong!');\n            // setIsLoading(false);\n            dispatchHttp({ type: 'ERROR', error: err });\n        });\n    }, []);\n\n    return {\n        isLoading: userHttpState.isLoading,\n        error: userHttpState.error,\n        data: userHttpState.data,\n        sendRequest: sendRequest\n    }\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}