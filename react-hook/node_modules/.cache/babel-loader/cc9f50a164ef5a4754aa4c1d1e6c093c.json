{"ast":null,"code":"var _jsxFileName = \"/Volumes/gCamouInc/Dev/Projects/Trainning/React/react-hook/src/components/Ingredients/Ingredients.js\";\nimport React, { useReducer, useEffect, useCallback, useMemo } from 'react';\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList';\nimport Search from './Search';\nimport ErrorModal from '../UI/ErrorModal';\nimport useHttp from '../../hooks/http';\n\nconst ingredientReducer = (currentState, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n\n    case 'ADD':\n      return [...currentState, action.ingredient];\n\n    case 'DELETE':\n      return currentState.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error('Something was wrong!');\n  }\n};\n\nconst Ingredients = () => {\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []);\n  useHttp(); //const [userIngredients, setUserIngredients] = useState([]);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log('RENDER INGREDIEANTS', userIngredients);\n  }, [userIngredients]);\n  const addIngredientHandler = useCallback(ingredient => {\n    // setIsLoading(true);\n    dispatchError({\n      type: 'SEND'\n    });\n    fetch('https://gcamou-green-market.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // setIsLoading(false);\n      dispatchError({\n        type: 'RESPONSE'\n      });\n      return response.json();\n    }).then(responseData => {\n      dispatch({\n        type: 'ADD',\n        ingredient: {\n          id: responseData.name,\n          ...ingredient\n        }\n      }); //  setUserIngredients(prevIngredients => [\n      //    ...prevIngredients,\n      //    { id: responseData.name, ...ingredient }])\n    }).catch(err => {\n      console.log(err); // setError('Something was wrong!');\n      // setIsLoading(false);\n\n      dispatchError({\n        type: 'ERROR',\n        error: 'Something was wrong!'\n      });\n    });\n  }, []);\n  const removeIngredientHandler = useCallback(id => {\n    //setIsLoading(true);\n    dispatchError({\n      type: 'SEND'\n    }); //            `https://gcamou-green-market.firebaseio.com/ingredients/${id}.json`, {\n  }, []);\n  const loadIngrediantsHandler = useCallback(ingredients => {\n    dispatch({\n      type: 'SET',\n      ingredients: ingredients\n    }); // setUserIngredients(ingredients);\n  }, []);\n  const closeModalHandler = useCallback(() => {\n    // setError(null);\n    dispatchError({\n      type: 'CLEAR'\n    });\n  }, []);\n  const ingredientList = useMemo(() => {\n    return /*#__PURE__*/React.createElement(IngredientList, {\n      ingredients: userIngredients,\n      onRemoveItem: removeIngredientHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    });\n  }, [userIngredients, removeIngredientHandler]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, userHttpState.error && /*#__PURE__*/React.createElement(ErrorModal, {\n    onClose: closeModalHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 31\n    }\n  }, userHttpState.error), /*#__PURE__*/React.createElement(IngredientForm, {\n    onAddIngrediant: addIngredientHandler,\n    isLoading: userHttpState.isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    onLoadIngredients: loadIngrediantsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), ingredientList));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Volumes/gCamouInc/Dev/Projects/Trainning/React/react-hook/src/components/Ingredients/Ingredients.js"],"names":["React","useReducer","useEffect","useCallback","useMemo","IngredientForm","IngredientList","Search","ErrorModal","useHttp","ingredientReducer","currentState","action","type","ingredients","ingredient","filter","ing","id","Error","Ingredients","userIngredients","dispatch","console","log","addIngredientHandler","dispatchError","fetch","method","body","JSON","stringify","headers","then","response","json","responseData","name","catch","err","error","removeIngredientHandler","loadIngrediantsHandler","closeModalHandler","ingredientList","userHttpState","isLoading"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useCallback, useMemo } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList'\nimport Search from './Search';\nimport ErrorModal from '../UI/ErrorModal';\n\nimport useHttp from '../../hooks/http';\n\nconst ingredientReducer = (currentState, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n    case 'ADD':\n      return [...currentState, action.ingredient];\n    case 'DELETE':\n      return currentState.filter(ing => ing.id !== action.id);\n    default:\n      throw new Error('Something was wrong!');\n  }\n};\n\nconst Ingredients = () => {\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []);\n  useHttp();\n  //const [userIngredients, setUserIngredients] = useState([]);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log('RENDER INGREDIEANTS', userIngredients);\n  }, [userIngredients]);\n\n\n  const addIngredientHandler = useCallback(ingredient => {\n    // setIsLoading(true);\n    dispatchError({ type: 'SEND' })\n    fetch('https://gcamou-green-market.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(response => {\n      // setIsLoading(false);\n      dispatchError({ type: 'RESPONSE' });\n      return response.json();\n    }).then(responseData => {\n      dispatch(\n        {\n          type: 'ADD',\n          ingredient: {\n            id: responseData.name,\n            ...ingredient\n          }\n        });\n      //  setUserIngredients(prevIngredients => [\n      //    ...prevIngredients,\n      //    { id: responseData.name, ...ingredient }])\n    }).catch(err => {\n      console.log(err);\n      // setError('Something was wrong!');\n      // setIsLoading(false);\n      dispatchError({ type: 'ERROR', error: 'Something was wrong!' });\n    });\n  }, []);\n\n  const removeIngredientHandler = useCallback(id => {\n    //setIsLoading(true);\n    dispatchError({ type: 'SEND' });\n    //            `https://gcamou-green-market.firebaseio.com/ingredients/${id}.json`, {\n\n  }, []);\n\n  const loadIngrediantsHandler = useCallback(ingredients => {\n    dispatch({ type: 'SET', ingredients: ingredients });\n    // setUserIngredients(ingredients);\n  }, []);\n\n  const closeModalHandler = useCallback(() => {\n    // setError(null);\n    dispatchError({ type: 'CLEAR' })\n  }, []);\n\n  const ingredientList = useMemo(() => {\n    return (<IngredientList ingredients={userIngredients} onRemoveItem={removeIngredientHandler} />);\n  }, [userIngredients, removeIngredientHandler]);\n\n  return (\n    <div className=\"App\">\n      {userHttpState.error && <ErrorModal onClose={closeModalHandler}>{userHttpState.error}</ErrorModal>}\n      <IngredientForm onAddIngrediant={addIngredientHandler} isLoading={userHttpState.isLoading} />\n\n      <section>\n        <Search onLoadIngredients={loadIngrediantsHandler} />\n        {ingredientList}\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}