{"ast":null,"code":"var _jsxFileName = \"/Volumes/gCamouInc/Dev/Projects/Trainning/React/react-hook/src/components/Ingredients/Ingredients.js\";\nimport React, { useState, useReducer, useEffect, useCallback } from 'react';\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList';\nimport Search from './Search';\nimport ErrorModal from '../UI/ErrorModal';\n\nconst ingredientReducer = (currentState, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n\n    case 'ADD':\n      return [...currentState, action.ingredient];\n\n    case 'DELETE':\n      return currentState.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error('Something was wrong!');\n  }\n};\n\nconst Ingredients = () => {\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []); //const [userIngredients, setUserIngredients] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('RENDER INGREDIEANTS', userIngredients);\n  }, [userIngredients]);\n\n  const addIngredientHandler = ingredient => {\n    setIsLoading(true);\n    fetch('https://gcamou-green-market.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      setIsLoading(false);\n      return response.json();\n    }).then(responseData => {\n      dispatch({\n        type: 'ADD',\n        ingredient: {\n          id: responseData.name,\n          ...ingredient\n        }\n      }); //  setUserIngredients(prevIngredients => [\n      //    ...prevIngredients,\n      //    { id: responseData.name, ...ingredient }])\n    }).catch(err => {\n      setError('Something was wrong!');\n      setIsLoading(false);\n    });\n  };\n\n  const removeIngredientHandler = id => {\n    setIsLoading(true);\n    fetch(`https://gcamou-green-market.firebaseio.com/ingredients/${id}.json`, {\n      method: 'DELETE'\n    }).then(() => {\n      setIsLoading(false);\n      dispatch({\n        type: 'DELETE',\n        id: id\n      }); // setUserIngredients(prevIngredients => prevIngredients.filter(ig => ig.id !== id))\n    }).catch(err => {\n      setError('Something was wrong!');\n      setIsLoading(false);\n    });\n  };\n\n  const loadIngrediantsHandler = useCallback(ingredients => {\n    dispatch({\n      type: 'SET',\n      ingredients: ingredients\n    }); // setUserIngredients(ingredients);\n  }, []);\n\n  const closeModalHandler = () => {\n    setError(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, error && /*#__PURE__*/React.createElement(ErrorModal, {\n    onClose: closeModalHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, error), /*#__PURE__*/React.createElement(IngredientForm, {\n    onAddIngrediant: addIngredientHandler,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    onLoadIngredients: loadIngrediantsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(IngredientList, {\n    ingredients: userIngredients,\n    onRemoveItem: removeIngredientHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Volumes/gCamouInc/Dev/Projects/Trainning/React/react-hook/src/components/Ingredients/Ingredients.js"],"names":["React","useState","useReducer","useEffect","useCallback","IngredientForm","IngredientList","Search","ErrorModal","ingredientReducer","currentState","action","type","ingredients","ingredient","filter","ing","id","Error","Ingredients","userIngredients","dispatch","isLoading","setIsLoading","error","setError","console","log","addIngredientHandler","fetch","method","body","JSON","stringify","headers","then","response","json","responseData","name","catch","err","removeIngredientHandler","loadIngrediantsHandler","closeModalHandler"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useCallback } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList'\nimport Search from './Search';\nimport ErrorModal from '../UI/ErrorModal';\n\nconst ingredientReducer = (currentState, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n    case 'ADD':\n      return [...currentState, action.ingredient];\n    case 'DELETE':\n      return currentState.filter(ing => ing.id !== action.id);\n    default:\n      throw new Error('Something was wrong!');\n  }\n};\n\nconst Ingredients = () => {\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []);\n  //const [userIngredients, setUserIngredients] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log('RENDER INGREDIEANTS', userIngredients);\n  }, [userIngredients]);\n\n\n  const addIngredientHandler = ingredient => {\n    setIsLoading(true);\n    fetch('https://gcamou-green-market.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(response => {\n      setIsLoading(false);\n      return response.json();\n    }).then(responseData => {\n      dispatch(\n        {\n          type: 'ADD',\n          ingredient: {\n            id: responseData.name,\n            ...ingredient\n          }\n        });\n      //  setUserIngredients(prevIngredients => [\n      //    ...prevIngredients,\n      //    { id: responseData.name, ...ingredient }])\n    }).catch(err => {\n      setError('Something was wrong!');\n      setIsLoading(false);\n    });\n  }\n\n  const removeIngredientHandler = id => {\n    setIsLoading(true);\n    fetch(`https://gcamou-green-market.firebaseio.com/ingredients/${id}.json`, {\n      method: 'DELETE'\n    }).then(() => {\n      setIsLoading(false);\n      dispatch({ type: 'DELETE', id: id });\n      // setUserIngredients(prevIngredients => prevIngredients.filter(ig => ig.id !== id))\n    }).catch(err => {\n      setError('Something was wrong!');\n      setIsLoading(false);\n    });\n  }\n\n  const loadIngrediantsHandler = useCallback(ingredients => {\n    dispatch({ type: 'SET', ingredients: ingredients });\n    // setUserIngredients(ingredients);\n  }, []);\n\n  const closeModalHandler = () => {\n    setError(null);\n  };\n\n  return (\n    <div className=\"App\">\n      {error && <ErrorModal onClose={closeModalHandler}>{error}</ErrorModal>}\n      <IngredientForm onAddIngrediant={addIngredientHandler} isLoading={isLoading} />\n\n      <section>\n        <Search onLoadIngredients={loadIngrediantsHandler} />\n        <IngredientList ingredients={userIngredients} onRemoveItem={removeIngredientHandler} />\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}